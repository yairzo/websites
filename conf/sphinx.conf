#
# Sphinx configuration file sample
#
# WARNING! While this sample file mentions all available options,
# it contains (very) short helper descriptions only. Please refer to
# doc/sphinx.html for details.
#

#############################################################################
## data source definition
#############################################################################

source call_for_proposal_src
{
	# data source type. mandatory, no default value
	# known types are mysql, pgsql, mssql, xmlpipe, xmlpipe2, odbc
	type			= mysql

	#####################################################################
	## SQL settings (for 'mysql' and 'pgsql' types)
	#####################################################################

	# some straightforward parameters for SQL source types
	sql_host		= localhost
	sql_user		= mop
	sql_pass		= hilazon48
	sql_db			= huard
	sql_port		= 3306	# optional, default is 3306

	# UNIX socket name
	# optional, default is empty (reuse client library defaults)
	# usually '/var/lib/mysql/mysql.sock' on Linux
	# usually '/tmp/mysql.sock' on FreeBSD
	#
	sql_sock		= /tmp/mysql.sock
	

	# pre-query, executed before the main fetch query
	# multi-value, optional, default is empty list of queries
	#
	# sql_query_pre		= SET NAMES utf8
	# sql_query_pre		= SET SESSION query_cache_type=OFF
	sql_query_pre                   = SET NAMES utf8
    sql_query_pre                   = SET SESSION net_read_timeout=3600
    sql_query_pre                   = SET SESSION net_write_timeout=3600
    sql_query_pre                   = SET SESSION wait_timeout=3600


	# main document fetch query
	# mandatory, integer document ID field MUST be the first selected column
	sql_query		= \
		SELECT id, UNIX_TIMESTAMP(creationTime) AS creation_time, title, description, \
		submissionDetails,contactPersons, contactPersonDetails, formDetails, fundingPeriod, amountOfGrant,\
		eligibilityRequirements, activityLocation, possibleCollaboration, budgetDetails,\
		additionalInformation,fundContact \
		FROM callForProposal

	# unsigned integer attribute declaration
	# multi-value (an arbitrary number of attributes is allowed), optional
	# optional bit size can be specified, default is 32
	#
	# sql_attr_uint		= author_id
	# sql_attr_uint		= forum_id:9 # 9 bits for forum_id
	sql_attr_uint		= group_id

	# ranged query throttling, in milliseconds
	# optional, default is 0 which means no delay
	# enforces given delay before each query step
	sql_ranged_throttle	= 0

	# document info query, ONLY for CLI search (ie. testing and debugging)
	# optional, default is empty
	# must contain $id macro and must fetch the document by that id
	sql_query_info		= SELECT * FROM callForProposal WHERE id=$id


}

source call_for_proposal_draft_src : call_for_proposal_src
{
	
	# main document fetch query
	# mandatory, integer document ID field MUST be the first selected column
	sql_query		= \
		SELECT id, UNIX_TIMESTAMP(creationTime) AS creation_time, title, description, \
		submissionDetails, contactPersons, contactPersonDetails, formDetails, fundingPeriod, amountOfGrant,\
		eligibilityRequirements, activityLocation, possibleCollaboration, budgetDetails,\
		additionalInformation,fundContact \
		FROM callForProposalDraft

}

source textual_page_src : call_for_proposal_src
{
	# main document fetch query
	# mandatory, integer document ID field MUST be the first selected column
	sql_query		= \
		SELECT id, title, description, html,group_concat(listTable.listNames,',',listTable.listNamesEnglish) \
		FROM textualPage left join \
		(SELECT listToSublist.listId AS listId, personAttribution.listId as personAttributionListId, \
		GROUP_CONCAT(firstNameHebrew," ",lastNameHebrew) as listNames, \
		GROUP_CONCAT(firstNameEnglish," ",lastNameEnglish) as listNamesEnglish \
		FROM list LEFT JOIN listToSublist ON (list.id = listToSublist.listId) \
		INNER JOIN personAttribution ON (list.id = personAttribution.listId OR listToSublist.sublistId = personAttribution.listId) \
		INNER JOIN person ON person.id=personAttribution.personId \
		GROUP BY personAttribution.listId) AS listTable ON textualPage.externalPageUrl=listTable.listId GROUP BY id;
}

source textual_page_draft_src : call_for_proposal_src
{
	# main document fetch query
	# mandatory, integer document ID field MUST be the first selected column
	sql_query		= \
		SELECT id, title, description, html,group_concat(listTable.listNames,',',listTable.listNamesEnglish) \
		FROM textualPageDraft left join \
		(SELECT listToSublist.listId AS listId, personAttribution.listId as personAttributionListId, \
		GROUP_CONCAT(firstNameHebrew," ",lastNameHebrew) as listNames, \
		GROUP_CONCAT(firstNameEnglish," ",lastNameEnglish) as listNamesEnglish \
		FROM list LEFT JOIN listToSublist ON (list.id = listToSublist.listId) \
		INNER JOIN personAttribution ON (list.id = personAttribution.listId OR listToSublist.sublistId = personAttribution.listId) \
		INNER JOIN person ON person.id=personAttribution.personId \
		GROUP BY personAttribution.listId) AS listTable ON textualPageDraft.externalPageUrl=listTable.listId GROUP BY id;
}
#############################################################################
## index definition
#############################################################################

# local index example
#
# this is an index which is stored locally in the filesystem
#
# all indexing-time options (such as morphology and charsets)
# are configured per local index
index call_for_proposal_index
{
	# document source(s) to index
	# multi-value, mandatory
	# document IDs must be globally unique across all sources
	source			= call_for_proposal_src

	# index files path and file name, without extension
	# mandatory, path must be writable, extensions will be auto-appended
	path			= /usr/local/sphinx/var/data/call_for_proposal_index

	# document attribute values (docinfo) storage mode
	# optional, default is 'extern'
	# known values are 'none', 'extern' and 'inline'
	docinfo			= inline

	# memory locking for cached data (.spa and .spi), to prevent swapping
	# optional, default is 0 (do not mlock)
	# requires searchd to be run from root
	mlock			= 0

	# a list of morphology preprocessors to apply
	# optional, default is empty
	#
	# builtin preprocessors are 'none', 'stem_en', 'stem_ru', 'stem_enru',
	# 'soundex', and 'metaphone'; additional preprocessors available from
	# libstemmer are 'libstemmer_XXX', where XXX is algorithm code
	# (see libstemmer_c/libstemmer/modules.txt)
	#
	# morphology		= stem_en, stem_ru, soundex
	# morphology		= libstemmer_german
	# morphology		= libstemmer_sv
	morphology		= none

	# minimum indexed word length
	# default is 1 (index everything)
	min_word_len		= 1

	# charset encoding type
	charset_type		= utf-8
	charset_table		= 0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F, U+0590..U+05FF, U+0022, U+0027



	# ignored characters list
	# optional, default value is empty
	#
	# ignore_chars		= U+00AD


	# minimum word prefix length to index
	# optional, default is 0 (do not index prefixes)
	#
	# min_prefix_len		= 0


	# minimum word infix length to index
	# optional, default is 0 (do not index infixes)
	#
	# min_infix_len		= 0


	# list of fields to limit prefix/infix indexing to
	# optional, default value is empty (index all fields in prefix/infix mode)
	#
	# prefix_fields		= filename
	# infix_fields		= url, domain


	# enable star-syntax (wildcards) when searching prefix/infix indexes
	# search-time only, does not affect indexing, can be 0 or 1
	# optional, default is 0 (do not use wildcard syntax)
	#
	# enable_star		= 1


	# expand keywords with exact forms and/or stars when searching fit indexes
	# search-time only, does not affect indexing, can be 0 or 1
	# optional, default is 0 (do not expand keywords)
	#
	# expand_keywords		= 1

	
	# n-gram length to index, for CJK indexing
	# only supports 0 and 1 for now, other lengths to be implemented
	# optional, default is 0 (disable n-grams)
	#
	# ngram_len		= 1


	# n-gram characters list, for CJK indexing
	# optional, default is empty
	#
	# ngram_chars		= U+3000..U+2FA1F


	# whether to strip HTML tags from incoming documents
	# known values are 0 (do not strip) and 1 (do strip)
	# optional, default is 0
	html_strip		= 1

	# what HTML attributes to index if stripping HTML
	# optional, default is empty (do not index anything)
	#
	html_index_attrs	= img=alt,title; a=title;


	# what HTML elements contents to strip
	# optional, default is empty (do not strip element contents)
	#
	html_remove_elements	= style, script	
}

index call_for_proposal_draft_index : call_for_proposal_index
{
	source			= call_for_proposal_draft_src
	path			= /usr/local/sphinx/var/data/call_for_proposal_draft_index
	
	# charset encoding type
	charset_type		= utf-8
	charset_table		= 0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F, U+0590..U+05FF, U+0022, U+0027

} 


index textual_page_index : call_for_proposal_index
{
	source			= textual_page_src
	path			= /usr/local/sphinx/var/data/textual_page_index


	# charset encoding type
	charset_type		= utf-8
	charset_table		= 0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F, U+0590..U+05FF, U+0022, U+0027
	
}

index textual_page_draft_index : call_for_proposal_index
{
	source			= textual_page_draft_src
	path			= /usr/local/sphinx/var/data/textual_page_draft_index


	# charset encoding type
	charset_type		= utf-8
	charset_table		= 0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F, U+0590..U+05FF, U+0022, U+0027
	
}

#############################################################################
## indexer settings
#############################################################################

indexer
{
	# memory limit, in bytes, kiloytes (16384K) or megabytes (256M)
	# optional, default is 32M, max is 2047M, recommended is 256M to 1024M
	mem_limit		= 32M

	# maximum IO calls per second (for I/O throttling)
	# optional, default is 0 (unlimited)
	#
	# max_iops		= 40


	# maximum IO call size, bytes (for I/O throttling)
	# optional, default is 0 (unlimited)
	#
	# max_iosize		= 1048576


	# maximum xmlpipe2 field length, bytes
	# optional, default is 2M
	#
	# max_xmlpipe2_field	= 4M


	# write buffer size, bytes
	# several (currently up to 4) buffers will be allocated
	# write buffers are allocated in addition to mem_limit
	# optional, default is 1M
	#
	# write_buffer		= 1M


	# maximum file field adaptive buffer size
	# optional, default is 8M, minimum is 1M
	#
	# max_file_field_buffer	= 32M
}

#############################################################################
## searchd settings
#############################################################################

searchd
{
	# [hostname:]port[:protocol], or /unix/socket/path to listen on
	# known protocols are 'sphinx' (SphinxAPI) and 'mysql41' (SphinxQL)
	#
	# multi-value, multiple listen points are allowed
	# optional, defaults are 9312:sphinx and 9306:mysql41, as below
	#
	# listen			= 127.0.0.1
	# listen			= 192.168.0.1:9312
	# listen			= 9312
	# listen			= /var/run/searchd.sock
	listen			= 9312
	listen			= 9306:mysql41

	# log file, searchd run info is logged here
	# optional, default is 'searchd.log'
	log			= /usr/local/sphinx/var/log/searchd.log

	# query log file, all search queries are logged here
	# optional, default is empty (do not log queries)
	query_log		= /usr/local/sphinx/var/log/query.log

	# client read timeout, seconds
	# optional, default is 5
	read_timeout		= 5

	# request timeout, seconds
	# optional, default is 5 minutes
	client_timeout		= 300

	# maximum amount of children to fork (concurrent searches to run)
	# optional, default is 0 (unlimited)
	max_children		= 30

	# PID file, searchd process ID file name
	# mandatory
	pid_file		= /usr/local/sphinx/var/log/searchd.pid

	# max amount of matches the daemon evRU.UTF-8


	# threaded server watchdog (only used in workers=threads mode)
	# optional, values are 0 and 1, default is 1 (watchdog on)
	#
	# watchdog				= 1

	
	# SphinxQL compatibility mode (legacy columns and their names)
	# optional, default is 1 (old-style)
	#
	# compat_sphinxql_magics	= 1
}

# --eof--

